package com.mattg.viewmodelexample.database.daos;

import androidx.lifecycle.LiveData;
import androidx.room.Dao;
import androidx.room.Delete;
import androidx.room.Insert;
import androidx.room.OnConflictStrategy;
import androidx.room.Query;
import androidx.room.RoomWarnings;
import androidx.room.Update;

import com.mattg.viewmodelexample.database.ListWrapper;
import com.mattg.viewmodelexample.database.entities.Menu;
import com.mattg.viewmodelexample.models.MenuItem;

import java.util.List;

/**
 * {@link Dao} to interface with the menu_table
 * 6-21 [MG]
 */
@Dao
public interface MenuDao {
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    long insertNewMenu(Menu menu);
    /**
     * @param menuItems List<MenuItem> to insert
     */
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    void insertMenuList(List<MenuItem> menuItems);
    /**
     * Deletes a particular menu from room database
     * @param menu Menu to delete
     */
    @Delete
    void deleteMenu(Menu menu);
    /**
     * Will update a menu if it exists with passed in menu object.
     * @param menu updated menu
     */
    @Update
    void updateMenu(Menu menu);
    /**
     * Deletes all items from the table.
     */
    @Query("DELETE FROM menu_table")
    void deleteAllMenus();

    /**
     * Method to help repository class determine whether or not to insert a new table
     * @param menuId the menuId (not autogenerated)
     * @return List of menus that match the menuId column
     */
    @Query("SELECT * FROM menu_table WHERE menu_id = :menuId")
    List<Menu> getMenuIdCheck(int menuId);
    /**
     * A method to get a single menu from the db as an observable field
     */
    @Query("SELECT * FROM MENU_TABLE where menu_id = :menuId LIMIT 1")
    LiveData<Menu> getOneMenuForUi(String menuId);
    /**
     * Select all menus
     * @return List<Menu> all menus from the menu table
     */
    @Query("SELECT * FROM menu_table")
    List<Menu> getMenuTable();
    @Query("SELECT * FROM menu_table")
    LiveData<List<Menu>> getMenuTableLiveData();
    /**
     * Selects the menu items from a given menu table by the db id (primary key)
     * @param id the menu's primary key
     * @return List<MenuItem>
     */
    @SuppressWarnings(RoomWarnings.CURSOR_MISMATCH)
    @Query("SELECT menu_items FROM menu_table where _id = :id")
    String getMenuItemsByDbId(int id);
    /**
     * Selects the menu items list field from the menu table by db id (primary key)
     * @param id the menu's primary key.  This uses ROOMS secondary option made available by
     * a combination of GSON and TypeConverters.
     * @return List<MenuItem>
     */
    @SuppressWarnings(RoomWarnings.CURSOR_MISMATCH)
    @Query("SELECT menuItemList FROM menu_table where _id = :id")
    ListWrapper getMenuItemsByDbId2(int id);
   // List<MenuItem> getMenuItemsByDbId2(int id);
    /**
     * Selects the menu items from a given menu table by the assigned id.
     * @param id the menu's assigned Id
     * @return List<MenuItem>
     */
    @SuppressWarnings(RoomWarnings.CURSOR_MISMATCH)
    @Query("SELECT menu_items FROM menu_table where menu_id = :id")
    String getMenuItemsById(String id);
    /**
     * Selects the menu items list field from the menu table by assigned id.
     * @param id the menu's assigned id.  This uses ROOMS secondary option made available by
     * a combination of GSON and TypeConverters.
     * @return List<MenuItem>
     */
    @SuppressWarnings(RoomWarnings.CURSOR_MISMATCH)
    @Query("SELECT menuItemList FROM menu_table where menu_id = :id")
    ListWrapper getMenuItemsById2(String id);
    //List<MenuItem> getMenuItemsById2(String id);

    /**
     * Method to update the list of items inside a menu by its (primary key) id
     * @param menuItems List<MenuItem> the list to update
     * @param id the primary key id of the menu
     */
    @SuppressWarnings(RoomWarnings.CURSOR_MISMATCH)
    @Query("UPDATE menu_table SET menu_items = :menuItems WHERE _id = :id ")
    void insertNewItemsList(List<MenuItem> menuItems, int id);
    /**
     * Method to update the list of items inside a menu by its secondary id
     * @param menuItems List<MenuItem> the list to update
     * @param id the primary key id of the menu
     */
    @SuppressWarnings(RoomWarnings.CURSOR_MISMATCH)
    @Query("UPDATE menu_table SET menu_items = :menuItems WHERE menu_id = :id ")
    void insertNewItemsList2(List<MenuItem> menuItems, String id);
    /**
     * Method to update the list of items inside a menu by its (primary key) id
     * @param menuItems List<MenuItem> the list to update
     * @param id the primary key id of the menu
     */
    @SuppressWarnings(RoomWarnings.CURSOR_MISMATCH)
    @Query("UPDATE menu_table SET menuItemList = :menuItems WHERE _id = :id ")
    void insertNewItemsList2_1(List<MenuItem> menuItems, int id);
    /**
     * Method to update the list of items inside a menu by its secondary id
     * @param menuItems List<MenuItem> the list to update
     * @param id the primary key id of the menu
     */
    @SuppressWarnings(RoomWarnings.CURSOR_MISMATCH)
    @Query("UPDATE menu_table SET menuItemList = :menuItems WHERE menu_id = :id ")
    void insertNewItemsList2_2(List<MenuItem> menuItems, String id);

    @Query("SELECT * FROM menu_table WHERE menu_id = 55555")
    LiveData<Menu> getMenuLiveDataTest();
    @Query("SELECT * FROM menu_table WHERE menu_id = :id")
    LiveData<Menu> getMenuByIdLiveData(String id);
    @Query("SELECT * FROM menu_table WHERE menu_id = :id")
    Menu getMenuById(String id);
    /**
     * Clears all data
     */
    @Query("DELETE FROM menu_table")
    void nukeMenus();

}
